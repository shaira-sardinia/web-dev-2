const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const asyncHandler = require("express-async-handler");
const userDAO = require("../models/userModel");
const { AuthenticationError } = require("../utils/errors/customError");

const userModel = new userDAO();

exports.login = asyncHandler(async (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;

  const user = await userModel.findUser(email);

  if (!user) {
    console.log(`User ${email} not found.`);
    throw new AuthenticationError("Invalid email or password.", 401);
    //render alert here, no email found!
  }

  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    throw new AuthenticationError("Invalid email or password.", 401);
  }

  let payload = {
    email: user.email,
    userId: user.userId,
    name: user.name,
    role: user.role || "user",
  };

  let accessToken = jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET);
  res.cookie("jwt", accessToken);

  res.redirect("/dashboard");
});

exports.verify = asyncHandler(async (req, res, next) => {
  let accessToken = req.cookies.jwt;

  if (!accessToken) {
    throw new AuthenticationError("Please log in to access this page.", 401);
  }

  try {
    const decodedPayload = jwt.verify(accessToken, process.env.ACCESS_TOKEN_SECRET);
    console.log("Token verified for user:", decodedPayload.email);

    req.user = decodedPayload;
    next();
  } catch (error) {
    throw new AuthenticationError("Your session has expired. Please log in again.");
  }
});

exports.checkRole = (roles) => {
  return (req, res, next) => {
    if (!req.user) {
      throw new AuthenticationError("Please log in to access this page.", 401);
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).render("error", { message: "Access forbidden", error: { status: 403, stack: "" } });
    }
    next();
  };
};

exports.logout = asyncHandler(async (req, res, next) => {
  res.clearCookie("jwt").status(200).redirect("/");
});
