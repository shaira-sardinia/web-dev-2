const { application, response } = require("express");
const organiserDAO = require("../models/organiserModel");
const classesDAO = require("../models/classModel");
const asyncHandler = require("express-async-handler");
const { validateOrganiser } = require("../utils/middlewares/validation");
const { handleValidationErrors } = require("../utils/errors/validationError");

const organiserModel = new organiserDAO();
const classModel = new classesDAO();

/* Organiser */
exports.load_organisers = asyncHandler(async () => {
  const list = await organiserModel.getAllOrganisers();
  return list;
});

exports.new_organiser_entry = asyncHandler(async (req, res, next) => {
  res.render("forms/organiser-form", {});
});

exports.post_organiser_entry = [
  validateOrganiser,
  handleValidationErrors("forms/organiser-form"),
  asyncHandler(async (req, res, next) => {
    await organiserModel.addOrganiser(req.body.name, req.body.email, req.body.phone, req.body.bio);
    //add pop up to say entry is added successfully
    res.redirect("/dashboard");
  }),
];

exports.delete_organiser = asyncHandler(async (req, res, next) => {
  const orgId = req.params.orgId;
  organiserModel.deleteOrganiser(orgId);
  console.log(`Organiser  ${orgId} deleted successfully`);
  //add pop up here to say successful
  res.redirect("/dashboard");
});

exports.edit_organiser = asyncHandler(async (req, res, next) => {
  const orgId = req.params.orgId;

  organiserModel.findOrganiser(orgId).then((organiser) => {
    res.render("forms/organiser-form", {
      organiser: organiser,
      isEditing: true,
      orgId: orgId,
      title: "Edit Organiser Details",
    });
  });
});

exports.update_organiser = [
  validateOrganiser,
  handleValidationErrors("forms/organiser-form"),
  asyncHandler(async (req, res, next) => {
    const orgId = req.params.orgId;
    const updatedData = {
      name: req.body.name,
      email: req.body.email,
      phone: req.body.phone,
      bio: req.body.bio,
    };

    await organiserModel.updateOrganiser(orgId, updatedData).then(() => {
      console.log(`Organiser ${orgId} update successfully`);
      res.redirect("/dashboard");
      // add a pop up here to say data updated successfully
    });
  }),
];

exports.get_organiser_classes = asyncHandler(async (req, res) => {
  const orgId = req.params.orgId;
  const classes = await classModel.getClassesByOrganiser(orgId);
  const organiser = await organiserModel.findOrganiser(orgId);

  res.render("organiser-profile", {
    classes,
    organiser,
  });
});
